buildscript {
    repositories {
        maven {
            url "${nexusUrl}/content/groups/public/"
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:2.4.0'
    }
}

group 'com.wow'
version '1.0-SNAPSHOT'

configurations {
    mybatisGenerator
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        url "${nexusUrl}/content/groups/public/"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}/content/repositories/releases") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/8/docs/api/"
    }
}

dependencies {

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.35'
    compile 'org.mybatis.generator:mybatis-generator:1.3.2'

    compile 'org.springframework.boot:spring-boot-starter-web'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-redis'
    compile 'org.hibernate:hibernate-validator:5.2.4.Final'
    compile group: 'org.mybatis', name: 'mybatis-spring', version: '1.3.0'
    compile group: 'org.mybatis', name: 'mybatis', version: '3.4.1'
    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'com.wow:product-service:1.0-SNAPSHOT'
    compile 'com.wow:attribute-service:1.0-SNAPSHOT'
    compile 'com.wow:user-service:1.0-SNAPSHOT'
    compile 'com.wow:order-service:1.0-SNAPSHOT'
    compile 'com.wow:price-service:1.0-SNAPSHOT'
    compile 'com.wow:stock-service:1.0-SNAPSHOT'
    compile 'com.wow:marketing-service:1.0-SNAPSHOT'
    compile 'com.wow:page-service:1.0-SNAPSHOT'
    compile 'com.wow:common-util:1.0-SNAPSHOT'
    compile "com.taobao:api:1.0"

    testCompile 'junit:junit:4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

bootRun {
    addResources = true
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/generator/mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}


task dbgen << {

    def properties = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: false,
            configfile: 'src/main/resources/generator/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}


remotes {
    intranetServer {
        host = '10.0.60.121'
        user = 'root'
        password = " "
    }
}

springBoot {
    executable = true
}

task deploy << {
    ssh.run {
        session(remotes.intranetServer) {
            put from: 'build/libs/admin-api-1.0-SNAPSHOT.jar', into: '/data/server/'
            execute 'chmod -R 777 /data/server/'
            execute 'systemctl daemon-reload'
            execute 'systemctl stop wowdsgn-admin.service'
            execute 'systemctl start wowdsgn-admin.service'
        }
    }
}
